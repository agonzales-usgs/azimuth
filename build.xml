<project name="azimuth" default="compile" basedir=".">
    <description>
        ASL Azimuth
    </description>

    <!-- set global properties for this build -->
    <property name="project.main"               value="asl.azimuth.Azimuth" />
    <property name="project.archive"            value="Azimuth.jar" />
    <property name="src.dir"                    location="src"/>
    <property name="libs.dir"                   location="lib"/>
    <property name="resources.dir"              location="resources"/>
    <property name="build.root"                 location="build"/>
    <property name="build.resources"            location="build/resources"/>
    <property name="manifest.file"              value="${src.dir}/META-INF/MANIFEST.MF" />

    <!-- Classpath for compile -->
    <path id="compile.class.path">
        <pathelement location="${src.dir}"/>
        <fileset dir="${libs.dir}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <!-- Classpath for test -->
    <path id="test.class.path">
        <pathelement location="${build.root}" />
        <fileset dir="${libs.dir}">
            <include name="**/*.jar" />
        </fileset>
    </path>

<!--INIT-->
    <target name="init" depends="clean_build" description="mkdir /build and /build/resources [depends = clean_build]" >
        <tstamp/>
        <mkdir dir="${build.root}"/>
        <mkdir dir="${build.resources}"/>
    </target>

<!--INIT_DOC-->
    <target name="init_doc" depends="clean_docs">
        <tstamp/>
        <mkdir dir="${doc.dir}"/>
    </target>


<!--COMPILE-->
    <target name="compile" depends="init" description="Compile the source [depends = init]">
        <javac srcdir="${src.dir}" destdir="${build.root}" encoding="utf-8" debug="true" includeantruntime="no">
            <classpath refid="compile.class.path"/>
            <compilerarg value="-Xlint" />
        </javac>
    </target>

<!--DATA-->
    <target name="data" depends="" description="Add resource files [cp ./resources to build/resources]">
        <copy todir="${build.resources}">
            <fileset dir="${resources.dir}">
            </fileset>
        </copy>
    </target>

<!--TEST-->
    <target name="test" depends="data" description="Run main from /build dir [depends = data]">
        <java classname="${project.main}" classpathref="test.class.path" fork="true">
            <jvmarg value="-Xms64m"/>
            <jvmarg value="-Xmx1024m"/>
            <jvmarg value="-Djava.awt.headless=false"/>
        </java>
    </target>


<!--LIBRARIES-->
    <target name="libraries" depends="init" description="Add libraries">
        <unjar dest="${build.root}">
            <fileset dir="${libs.dir}">
                <include name="**/*.jar"/>
            </fileset>
        </unjar>
        <delete dir="${build.root}/META-INF"/>
    </target>

    
<!--JAR-->
    <target name="jar" depends="compile, data, libraries" description="generate the distribution" >
        <jar jarfile="${project.archive}" basedir="${build.root}">
            <manifest>
                <attribute name="Main-Class" value="${project.main}"/>
            </manifest>
        </jar>
    </target>


<!--PACKAGE-->
    <target name="package" depends="clean_package"
            description="zips all sources and relevent files into an archive">
            <mkdir dir="${package.root}"/>
            <mkdir dir="${package.base}"/>
            <mkdir dir="${package.libs}"/>
            <mkdir dir="${package.resources}"/>
            <mkdir dir="${package.src}"/>
            <copy todir="${package.libs}">
                <fileset dir="${libs.dir}"/>
            </copy>
            <copy todir="${package.resources}">
                <fileset dir="${resources.dir}"/>
            </copy>
            <copy todir="${package.src}">
                <fileset dir="${src.dir}"/>
            </copy>
            <copy todir="${package.base}">
                <fileset dir=".">
                    <include name="license-*.txt"/>
                </fileset>
            </copy>
            <!--copy file="${test.seed.file}"  todir="${package.base}"/-->
            <copy file="${build.file}"      todir="${package.base}"/>
            <copy file="${properties.file}" todir="${package.base}"/>
            <zip destfile="${package.zip.file}" basedir="${package.root}"/>
            <tar destfile="${package.tar.file}" basedir="${package.root}" compression="bzip2"/>
    </target>
	
<!--DOCS-->
    <target name="docs" depends="init_doc"
            description="generate the javadoc documentation" >
        <javadoc 
        	sourcepath="${doc.src}" 
        	destdir="${doc.dir}" 
        	packagenames="${doc.packages}" 
        	access="private"
        	author="true"
        />
    </target>

<!--CLEAN-BUILD-->
    <target name="clean_build" depends="" description="clean up build content [del /build]" >
        <delete file="${project.target}"/>
        <delete dir="${build.root}"/>
    </target>

<!--CLEAN-PACKAGE-->
    <target name="clean_package" depends="" description="clean up package content" >
        <delete file="${package.zip.file}"/>
        <delete file="${package.tar.file}"/>
        <delete dir="${package.root}"/>
    </target>

<!--CLEAN-DOCS-->
    <target name="clean_docs" description="clean up docs" >
    	<delete dir="${doc.dir}"/>
    </target>

<!--CLEAN-->
    <target name="clean" description="clean up"
            depends="clean_build, clean_package, clean_docs"/>

</project>
